generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Product {
  id                 Int               @id @default(autoincrement())
  type               String?           // e.g. simple, variable
  sku                String?
  barcode            String?
  name               String
  published          Boolean           @default(false)
  isFeatured         Boolean           @default(false)
  isBestSelling      Boolean           @default(false)
    liked      Boolean           @default(false)

  visibility         String?
  shortDescription   String?
description String? @db.Text
  saleStartDate      DateTime?
  saleEndDate        DateTime?
  taxStatus          String?
  taxClass           String?
  inStock            Boolean           @default(true)
  stock              Int?
  lowStockAmount     Int?
  allowBackorders    Boolean           @default(false)
  soldIndividually   Boolean           @default(false)
  weightKg           Float?
  lengthCm           Float?
  widthCm            Float?
  heightCm           Float?
  allowReviews       Boolean           @default(true)
  purchaseNote       String?
  salePrice          Float?
  regularPrice       Float
  shippingClass      String?
  downloadLimit      Int?
  downloadExpiryDays Int?
  parentId           Int?
  externalUrl        String?
  buttonText         String?
  position           Int?
  brand              String?
  badge              String?
  imageUrl           String
  hoverImage         String

  // Relations
  categories         ProductCategory[]
  tags               ProductTag[]
  images             ProductImage[]
  upsellsOrigin      Upsell[]          @relation("ProductUpsellOrigin")
  upsellsTarget      Upsell[]          @relation("ProductUpsellTarget")
  crossSellsOrigin   CrossSell[]       @relation("ProductCrossSellOrigin")
  crossSellsTarget   CrossSell[]       @relation("ProductCrossSellTarget")
  cartItems CartItem[] // ðŸ‘ˆ defines the back-reference
    attributes       ProductAttribute[] // ðŸ‘ˆ Add this
rank_math_title      String?
rank_math_description  String?
rank_math_focus_keyword  String?
URL           String?
}

model Category {
  id        Int               @id @default(autoincrement())
  name      String            @unique
  products  ProductCategory[]
}

model ProductCategory {
  id         Int      @id @default(autoincrement())
  product    Product  @relation(fields: [productId], references: [id])
  productId  Int
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}

model Tag {
  id        Int           @id @default(autoincrement())
  name      String        @unique
  products  ProductTag[]
}

model ProductTag {
  id        Int     @id @default(autoincrement())
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  tag       Tag     @relation(fields: [tagId], references: [id])
  tagId     Int
}

model ProductImage {
  id         Int     @id @default(autoincrement())
  url        String
  product    Product @relation(fields: [productId], references: [id])
  productId  Int
}

model Upsell {
  id        Int     @id @default(autoincrement())
  product   Product @relation("ProductUpsellOrigin", fields: [productId], references: [id])
  productId Int
  upsell    Product @relation("ProductUpsellTarget", fields: [upsellId], references: [id])
  upsellId  Int
}

model CrossSell {
  id          Int     @id @default(autoincrement())
  product     Product @relation("ProductCrossSellOrigin", fields: [productId], references: [id])
  productId   Int
  crossSell   Product @relation("ProductCrossSellTarget", fields: [crossSellId], references: [id])
  crossSellId Int
}
model Order {
  id            Int          @id @default(autoincrement())
  createdAt     DateTime     @default(now())
  firstName     String
  lastName      String
  email         String
  phone         String
  address       String
  apartment     String?
  city          String
  state         String
  country       String
  zipcode       String
  companyName   String?
  orderNotes    String?
  paymentMethod String
  totalAmount   Float
    shipping   Float

  items         OrderItem[]
    payments      Payment[]
    
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  productId Int
  name      String
  price     Float
  quantity  Int
}
model Payment {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())
  orderId         Int
  razorpayOrderId String
  razorpayPaymentId String
  razorpaySignature String
  amount          Float
  status          String    // e.g. "paid", "failed"
  method          String    // e.g. "Razorpay"
  order           Order     @relation(fields: [orderId], references: [id])
}
model CartItem {
  id        Int     @id @default(autoincrement())
  productId Int
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  createdAt DateTime @default(now())
}
model Attribute {
  id       Int              @id @default(autoincrement())
  name     String           @unique          // e.g. "Color", "Size"
  values   AttributeValue[]
}

model AttributeValue {
  id          Int              @id @default(autoincrement())
  value       String           // e.g. "Red", "M", "Cotton"
  attribute   Attribute        @relation(fields: [attributeId], references: [id])
  attributeId Int
  products    ProductAttribute[]
}

model ProductAttribute {
  id                Int              @id @default(autoincrement())
  product           Product          @relation(fields: [productId], references: [id])
  productId         Int
  attributeValue    AttributeValue  @relation(fields: [attributeValueId], references: [id])
  attributeValueId  Int
}
